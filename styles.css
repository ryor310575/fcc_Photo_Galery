*{
    box-sizing: border-box;
}
body{
    margin: 0;
    font-family: sans-serif;
    background-color: #f5f6f7;
}
/*Header styles*/
.header{
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #ffffff;
    border-bottom: 4px solid #fdb347;
}
/* Galery styles*/
.gallery{
    display: flex;
    flex-direction:row;
    flex-wrap:wrap;
    justify-content: center;
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    gap: 16px;
}
.gallery::after{
    content: "";
    width: 350px;
}
.gallery img {
width:100%;
max-width: 350px;
height: 300px;
object-fit: cover;
border-radius: 10px;

}
/* Give your .gallery img selector the object-fit 
property and set it to cover. This will tell the image 
to fill the img container while maintaining aspect ratio, 
resulting in cropping to fit. */

/* The gap CSS shorthand property sets the gaps, also knowns 
as gutters, between rows and columns. The gap property and 
its row-gap and column-gap sub-properties provide this functionality 
for flex, grid, and multi-column layout. 
You apply the property to the container element. */

/* The ::after pseudo-element creates an element that is the 
last child of the selected element. You can use it to add an 
empty element after the last image. If you give it the same 
width as the images it will push the last image to the left 
when the gallery is in a two-column layout. Right now, it is in the center 
because you set justify-content: center on the flex container. */